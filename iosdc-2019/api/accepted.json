{"proposals":[{"uuid":"aaf65ef8-345a-4d5c-856b-9aff5368810c","title":"普通に書くと即メモリーリーク！こんなに大変だけど俺はXamarin.iOSを使い続けるぜ！","abstract":"皆さん、Xamarin の名前くらいは聞いた事がありますよね！\r\n\r\n『ああ、C#で、iOSアプリが開発できるやつね。』\r\n\r\n6年前、Objective-Cから逃げたくて手を出した、Xamarin.iOSは私に幸福をもたらすはずだった...\r\n\r\nだがしかしそこに待ち受けていたのは底なし沼だった！\r\n\r\n気づけばどんどん深掘りされる技術！\r\nその底にたどり着いた時に膨大な、これ必要か⁉︎的な知識を得ている事に気づきました！\r\n\r\n今明かされるXamarin.iOSの全貌！\r\n\r\n●普通に書くと即メモリーリーク！\r\n●幻の大地か！ネイティブとマネージド、2つの世界を行き来してメモリーリークのチェック！\r\n●情報がないのでSwiftのコードを読む日々\r\n●Swiftじゃダメだ！Objective-Cを理解せねば！\r\n●あれ？俺何のためにXamarin.iOS始めたんだっけ？\r\n●それでも俺はXamarin.iOSをやめない！","accepted":true,"speaker":{"name":"Tomohiro Suzuki","kana":"スズキトモヒロ","twitter":"hiro128_777","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/f31abae2-5cbb-4604-9692-e1a3a32c153f.jpg"},"created":"2019-05-08T21:33:14+09:00","timetable":{"track":"Track D","starts_at":"2019-09-05T18:10:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"0c06aeca-5b6a-4bbe-aeeb-7531740975c5","title":"Swiftクリーンコードアドベンチャー　~日々の苦悩を乗り越え、確かな選択をするために~","abstract":"Swiftは多くのプログラミング言語の良い所を採用しており\r\n多種多様な方法でコードを書くことが可能であるため\r\n同じ問題に対しても人によってコードの書き方は大きく異なります。\r\n\r\nそうした状況の中で\r\n\r\n「これは正しい書き方なのだろうか？」\r\n「もっと上手い書き方があるのではないだろうか？」\r\n「いったい何が良いコードなのか？」\r\n\r\nと悩むことは多いのではないでしょうか。\r\n\r\n私は毎日悩み続けています。\r\n\r\nそんな中\r\nこれが正解というものはありませんが\r\n数あるコードの中でも\r\n多くの方から良いコードと呼ばれている\r\nいわゆる「クリーンコード」は存在します。\r\n\r\n今回は\r\n私が日々苦悩する中で出会ってきたコードを題材に\r\n\r\nどのような状況で、どのような書き方がされ、なぜそう書かれたのか\r\n\r\nを見ていき\r\n\r\n「クリーンコード」とはどういうものなのか？\r\nなぜ「クリーンコード」は必要なのか？\r\n「クリーンコード」を書くためにはどうすればよいのか？\r\n\r\nなどについて\r\nみなさまと一緒に\r\nコードの世界を探検する中で発見していきたいと思います。\r\n\r\n今回の発表を通して\r\n\r\n「こういうときはこういう理由でこうすれば良い」\r\n\r\nといった「確かな選択」ができる回数が増え\r\n日々の苦悩を乗り越えるための一助になりましたら幸いです。","accepted":true,"speaker":{"name":"shiz","kana":"しず","twitter":"stzn3","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/ffc6767a-50b9-45b1-bfe7-e630be836f3c.jpg"},"created":"2019-05-11T08:42:11+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"873b4cdb-4c92-4111-bf0b-67a67dbb242e","title":"ダックタイピングとidでUserDefaultsをモック化する","abstract":"~黒魔術がObjecitve-C Runtime APIだけだといつから錯覚していた？~\r\n\r\niOSで黒魔術といえばObjecitve-C Runtime APIが注目されがちですが、\r\n当然それ以外にも色々な黒魔術が存在します。\r\n\r\nダックタイピングはオブジェクトの型を見るのではなく、オブジェクトそのものがメソッドを持つかどうかという考え方に基づいた手法です。\r\nRubyやPythonではポリモーフィズムを実現する手段として使われている一方、iOS(特にSwift)ではあまり馴染みのない考え方だと思います。\r\n\r\nしかし、実はObjective-Cでこのダックタイピングの考え方に基づいた設計\/実装が行われています。\r\n\r\n本セッションでは、そのダックタイピングの考え方が使われている例に触れつつ、\r\nObj-Cの特徴であるid型と組み合わせてUserDefaultsをテスト用のオブジェクトに差し替えた話をします。\r\n(UserDefaultsをprotocolでラップする話ではありません)","accepted":true,"speaker":{"name":"417.72KI","kana":"シイナナツキ","twitter":"417_72ki","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg"},"created":"2019-05-13T11:39:46+09:00","timetable":{"track":"Track E","starts_at":"2019-09-05T18:40:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"760a3747-b7d3-4b1a-a141-85a93a31f66d","title":"色の難しい話に負けない体づくり60分","abstract":"カラーコードとUIColor (or SwiftUI Color) さえわかれば色の話は十分だと思っていませんか？残念ながら違います！私たちが色に関するガイドラインを覗いたとき、謎の数式と用語も私たちを覗き返してくるのです。そこから逃げ出して曖昧な理解のままアプリを作ったら、きっと使いにくいものになってしまうでしょう。\r\n\r\n本セッションでは、知っておくと心強い光と色の知識をみなさんと一緒に確認していきます。\r\n色の決まりや仕組みを理解することで、ドキュメントやガイドラインの意図を正しく掴むことにつながり、私たちが気をつけるべき点をしっかり抑えることができるようになります。小難しい話の並んだドキュメントももう怖くありません。\r\nもちろん、色のお話はiOSやiPhoneだけのものではありません。他のアプリやスライド資料などを作るときにも役立ちます。読みにくいスライドで聴衆のみなさんをがっかりさせてしまった……ということがないように、この機会に色への意識を変えていきましょう！\r\n\r\n【対象】\r\n\r\n- RGBカラーコードまではわかるぞ！という方\r\n- 発表資料の質をワンランク上げていきたい方\r\n- ガイドライン中の謎の用語と英語で手が止まっちゃう方\r\n- 色に関する注意事項の丸暗記が苦手な方、卒業したい方\r\n\r\n【取り扱うテーマ】\r\n\r\n- で、コントラスト比って何でしたっけ？\r\n- HIG Colorに載っている謎の虹色画像は何者？\r\n- 色覚異常の方は何色の区別が苦手なんだっけ……？\r\n- ダークモードっていうのが最近の流行りなの？なんで？\r\n- イラレにiPhoneのスクショを配置したらヤバイ色になった助けて！\r\n\r\nまた、これらの問題の理解に必要となる光の仕組みや色の定義の説明、関連するガイドラインの紹介も行います。","accepted":true,"speaker":{"name":"しもとり","kana":"シモトリ","twitter":"S_Shimotori_pub","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/8ed08430-b3c3-497c-80ef-a67fc56e4ad3.jpg"},"created":"2019-05-14T23:00:34+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T10:50:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"c677f8b6-25a1-4e87-beb1-689ef498a692","title":"日本のサマータイムに苦しめられた話","abstract":"みなさんは以下の4日が何の日かご存知でしょうか？\r\n・1948年5月2日\r\n・1949年4月3日\r\n・1950年5月7日\r\n・1951年5月6日\r\n\r\n正解は「日本におけるサマータイムの開始日」です。\r\n\r\n実は日本でも1948〜1951年の4シーズンのみ、サマータイムが実施されていたことがあります。\r\nAppleは日本のサマータイムを忠実に再現しており、タイムゾーンをJST(日本標準時)にすることで確認できます。\r\n\r\n実際の業務で、サマータイムの開始日の文字列が日付型に変換できず、アプリが強制終了することがありました。\r\n原因の追求とサマータイムの仕組みの調査に苦戦したので、本セッションではそのときのできごとを実際に対応した時間軸に沿って話します。\r\niOSのバージョンによって挙動が異なる点も苦しめられた一つです。\r\n\r\n※本セッションではObjective-Cのコードのみ扱います。ただし、Swiftのみ扱っている方でも理解しやすい内容となっています。\r\n\r\n【アジェンダ】\r\n・日本のサマータイムについて\r\n・サマータイムによる不具合の内容\r\n・不具合の調査結果\r\n・対応策の検討と、実際に対応した方法\r\n\r\n【想定する聞き手】\r\n・日本にサマータイムが導入されていたことを知らない人\r\n・iOSアプリ開発でサマータイムを考慮したことがない人\r\n\r\n【ゴール】\r\n・日本で導入されていたサマータイムの境界日時を知り、取り扱いに気をつける日時だと認識する\r\n・iOSにおける日本のサマータイムの実装を知る\r\n\r\n\r\n「キング・クリムゾン…1時間もの時間が消し飛び、この世には「サマータイムが発生した」という「結果」だけが残るッ！！」","accepted":true,"speaker":{"name":"uhooi","kana":"ウホーイ","twitter":"the_uhooi","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/785cd411-35dc-440c-841a-09304078c653.jpg"},"created":"2019-05-15T02:05:00+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:10:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"3c48cd53-0539-4793-8367-11a4d9efbc9f","title":"Getting Started with Swift WebAssembly","abstract":"巷ではServer Side SwiftやSwift for TensorFlowが盛り上がっていますが、Swift on WebAssemblyにも大きな動きがありました。しかし、SwiftのWasm対応は、まだまだKotlin NativeやRustに遅れをとっている状態です。LLVMをバックエンドに採用しているSwiftならシュッと対応できそうですが、なぜここまで難航しているのでしょうか？\r\nこのトークではSwift on Wasmのランタイムがどのように実現されているか「軽く」お話しします。","accepted":true,"speaker":{"name":"kateinoigakukun","kana":"家庭の医学くん","twitter":"kateinoigakukun","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/c2a2395e-55ec-4f9c-ad12-6f33f401bbf1.png"},"created":"2019-05-17T08:53:51+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:40:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"723b458a-2b5d-41a1-bec5-2cd5ccf722c0","title":"詳解 Auto-Renewable Subscriptions","abstract":"本トークでは、Auto-Renewable Subscriptionsと呼ばれる、定期的に新しいコンテンツが配信される種類のApp内課金について、実際に実装する上でハマったことや実装前に知りたかったようなノウハウを織り交ぜて説明します。\r\nまた、今年のWWDCのセッション『In-App Purchases and Using Server-to-Server Notifications』では、サーバー間通知の仕様のアップデートがアナウンスされ、レシートの取り回しの方針が今秋から大きく変わることが判明しました。本トークではそちらについてもご紹介いたします。\r\n\r\n【アジェンダ】\r\n1. In-App Purchasesについて\r\n2. Auto-Renewable Subscriptions導入の経緯\r\n3. Auto-Renewable Subscriptionsの大まかな処理の流れ\r\n4. StoreKit frameworkの各メソッド定義と実装方法\r\n5. Sandboxテスターによる動作確認方法\r\n6. サーバーサイドの設計\r\n  ・状態更新通知\r\n  ・Sandboxレシートのハンドリング\r\n  ・Grace Periodの実装\r\n  ・WWDC19で発表されたサーバー間通知の新しい仕様について\r\n7. リジェクトについて気をつけたいポイント","accepted":true,"speaker":{"name":"ロクネム","kana":"ロクネム","twitter":"_rockname","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/6e380c5d-3558-4a21-b216-3d3d6e175fb3.jpg"},"created":"2019-05-19T18:46:51+09:00","timetable":{"track":"Track E","starts_at":"2019-09-06T16:00:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"780f096f-bc18-49ec-b345-860f0054bdcb","title":"テストケースで Ambiguous Layout を発見する","abstract":"我々の開発において「アプリケーションのパフォーマンス」というものは非常に重要であるにも関わらず、優先順位は常に最下位に位置づけられがちです。顧客の体験を最も確実に向上させる手段の一つが、パフォーマンスの改善なのですが、我々は常に新規機能を開発しています。\r\nメモリリークやAutolayoutのエラーというものは一度発生すると永劫そこに留まり、アプリケーションのパフォーマンスを蝕んでいきます。\r\nどのようにこれらを防ぐのでしょうか。コードレビューで発見できるでしょうか。或いは発生したそれを修正するための時間を確保出来るでしょうか。\r\nこれらの問題は、コンパイラでは発見出来ません。コンパイラで発見できないものを防ぐ最も賢い手段の一つは、テストケースを書くことです。コードレビューではありません。それでは世界は救えません。\r\n\r\nメモリリークに関しては\"try! swift 2019\"で伝説の失敗に終わった私のデモとともに追放されました。(されたはずです)\r\n今回は最高峰の黒魔術を以て、我々の世界からAmbiguous Layoutを駆逐します。ご期待下さい。","accepted":true,"speaker":{"name":"tarunon","kana":"タルノン","twitter":"tarunon","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/2c2481a2-9dc3-4a94-b7ea-03fbccc0c352.jpg"},"created":"2019-05-21T21:51:57+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T10:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"f5466ec7-0975-475e-a053-747780c257bb","title":"簡単なアプリを作れるようになった！からその先に進むために","abstract":"入門書を読み終わり、簡単なアプリが作れるようになった！\r\nでもこの後はどうしたらいい？とりあえずアプリを作ったらいいの？\r\n\r\nこんなことを思った時期が少なくとも私にはありました\r\nコードをたくさん書くこともとても重要ですが、iOSアプリ開発の世界の広げ方はこれだけではないようです\r\n\r\nSwift上級者のコードを覗く、設計について考えてみる、技術書典で技術書を買って読んでみる、有名なライブラリやツールを導入して使ってみる、レビューをもらう、勉強会に参加する、勉強会運営にJOINしてみる、カンファレンスにスタッフとして参加してみる、などなど…\r\n\r\nこの一年間でSwift初級から中級くらいになるために私がやってきたことや、そこからどのような知見が得られたのかを素直に紹介していきたいと思います\r\niOSアプリ開発の世界にJOINしたばかりの方々の世界が広がると嬉しいです！","accepted":true,"speaker":{"name":"ろく","kana":"ロク","twitter":"66nylon_y","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/857b901b-82a5-4137-b029-7874e6da357d.jpg"},"created":"2019-05-23T21:11:09+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:55:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"820ac4b7-ebd1-44f9-b351-b223066a3838","title":"iOSアプリに「意識」は宿るのか？ディープラーニングの先にある人工知能（AI）","abstract":"人工知能技術の発展により、端末による物体の判別や自然言語処理など、iOSの様々な可能性が広がってきました。これらのうちほとんどは、現在隆盛のディープラーニング技術をベースにしています。しかしながら、このようなディープラーニングベースの人工知能はあくまで「ツール」としての人工知能です。ヒトの知能のもっとも高度な部分は大脳が担っていますが、大脳が扱う「意識」は、例えば夢を見ているときのように入力が出力が無くても自発的な活動を続けています。むしろ、大脳への入力や出力は、そのとてつもなく高度な機能の本質ではないのかもしれません。また、ディープラーニングは出力に対応する正解が必要な教師あり学習ですが、高度な自律性、汎用性を有する実際の大脳では正解データのない教師なし学習が行われています。より自律的、より汎用的な人工知能をiOSアプリが搭載するためには、このようなより天然の知能に近い仕組みをアプリが備える必要があります。\r\nそのために、本発表ではアプリが「意識」を備えるためには何が必要なのか、様々な可能性を示していきます。脳科学と人工知能の関係性から始めて、単純なルールから一筋縄ではいかない複雑な因果関係が生まれるカオスや複雑系、さらに意識を扱う理論である統合情報理論、グローバル・ワークスペース理論などを解説していきます。その上で、自律的な動作をする「意識のようなもの」へつながるアルゴリズムを探っていきます。\r\n果たして、スマートフォンはヒトにとって単なる「ツール」であり続けるのでしょうか、それとも、ドラえもんのようなヒトにとって大事な「パートナー」になるのでしょうか。本発表では、従来の「ツール」として有用なディープラーニングを離れて、生き物のような自律性を持つ「パートナー」としての人工知能の可能性を探求します。","accepted":true,"speaker":{"name":"我妻幸長","kana":"アヅマユキナガ","twitter":"yuky_az","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/b109497b-ee36-411f-b6f6-f08af9fa35ef.jpg"},"created":"2019-05-24T18:25:50+09:00","timetable":{"track":"Track E","starts_at":"2019-09-07T10:50:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"973963ea-c6b2-46aa-a15b-1b34af099c84","title":"完全に同じ開発環境を素早く用意できる（もしくはできない）技術","abstract":"開発環境の構築って面倒ですよね。\r\nXcodeのインストールは時間がかかるし、その他いろんなツールに関して手順書を用意しておいても、ちょっと違うバージョンがうっかり入っちゃうとかよくあります。\r\n\r\nこのLTでは、毎月数十台のMacをセットアップし続けてきた経験から、Appleの提供する標準機能だけで全く同じ構成のmacOS環境を準備するために行ってきたいくつかの方法と、それぞれの特徴についてお話しします。\r\nまた、Sierra -> High Sierra -> Mojaveと毎年バージョンアップされるに伴って利用できる技術が変わっており、現在進行形で困っていることについても話します。","accepted":true,"speaker":{"name":"Hiroyuki Aoki","kana":"アオキ ヒロユキ","twitter":"Solti","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/82e33214-c96b-460a-9abc-b12228c28982.jpeg"},"created":"2019-05-26T08:08:11+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:35:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"b40d595d-7b06-45c1-b13d-30a2a5d64e9f","title":"BLEでiOS\/Android間でそこそこ大きなサイズのデータ通信を実現する (L2CAPもあるよ)","abstract":"みなさん、iOSやAndroidなど、端末同士のデータ交換にはどのような方法を使っていますか？\r\nログインや登録を必要としない、パケット代もかからない、モバイルデバイスで広く採用されている、OSを問わない、\r\nそんな理由でBluetoothを採用しようとした人は結構いらっしゃるのではないでしょうか。\r\n\r\nしかし、いざ採用したとしても、一度に少量しかデータを送れない、機種によって安定しない、データを正しく受け取れない…\r\nそんな経験から、BLEの採用を見送った方も多いのではないのでしょうか。\r\n\r\nそんなBLEですが、\r\niOS、Androidの各OSで内部的に行われている処理を読み解くと、\r\nデータを送るための処理を最適化するための道筋が見えてきます。\r\n\r\nこのトークでは、BLEの処理に対して各OSで何が行われているのか？何ができるのか？\r\nその上で最適なデータ通信を行うためには何をすればいいのか？を語りたいと思います。\r\n\r\nまた、iOS11より、通常のBLE通信とはまた違った選択肢「L2CAP」でのデータ通信が行えるようになりました。\r\nこちらの方式はほぼ公式ドキュメントが存在しない状況ですが、Android Qにも採用される予定の技術であり、\r\nそちらも合わせて語りたいと思います。","accepted":true,"speaker":{"name":"日向強","kana":"ヒュウガツヨシ","twitter":"coffeegyunyu","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/55d625b3-9c4f-435f-aeec-6bd386be51f3.jpg"},"created":"2019-05-28T01:15:37+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T14:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"b6608d85-d7c6-4c71-8560-c38ded225d3d","title":"ARKitの壁認識で、壁にぶち当たった話","abstract":"ARKitってうまい具合に、床や壁を認識してくれるんでしょ？\r\n\r\nそんなふうに考えていた時期が私にもありました..。\r\n\r\n壁にARで仮想のポスターを貼るアプリを開発する際に\r\nぶち当たった壁。それは壁の認識。\r\n\r\n「ほ と ん ど の 壁 は 特 徴 量 が 少 な く て 認 識 で き な い！」\r\n※ ARKitの水平面、垂直面認識には一定以上の特徴量が必要です。\r\n\r\nでは、どうやったら壁にARでポスターを貼れるのか….。\r\n\r\n文字通り壁の為に、壁に向き合い続けた1ヶ月間で得られた\r\nARKit開発にまつわるTipsや教訓を5分でまとめてご紹介します。\r\n\r\n【対象の方】\r\n\r\n- そろそろARKitにちょっと触れてみたい\r\n- ARKitの床、壁認識の方法に興味がある\r\n- ARKitのUI事情に興味がある\r\n- ARKitで仮想の壁をつくる方法に興味がある（ニッチ）","accepted":true,"speaker":{"name":"shibatom","kana":"シバトム","twitter":"shibatom_dev","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/abb7f802-1efb-4425-a811-d0decc006044.jpg"},"created":"2019-05-30T19:21:40+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:10:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"d2ce8e9f-6294-45da-912f-2246dba78401","title":"動画アプリの投げ銭機能における消耗型課金の仕組みと実装","abstract":"近年、ユーザーがクリエイターに直接お金を払ういわゆる投げ銭機能を提供しているサービスが増えてきました。\r\n自分が開発している動画アプリでも投げ銭機能を実装することになり、それに伴い投げ銭するためのアプリ内通貨の購入機能が必要でした。\r\nしかし、まだまだ事例は少なく参考になる情報などが少ない状況です。\r\n\r\nプレミアム機能を使うための月額課金プランをすでにネイティブ実装していたので、レシート検証の共通化などを行うためアプリ内通貨の購入機能もネイティブ実装することになりました。\r\n一部の処理は共通化できますが、月額課金プランはAuto-Renewable Subscriptions、アプリ内通貨の購入機能はConsumableと呼ばれる課金方式で実装するため、リトライ処理など課金トランザクションの扱いの差異などを意識して実装する必要があります。\r\nしかしよくネイティブ実装される課金方式は、自動更新型のAuto-Renewable Subscriptionsや非消耗型のNon-Consumableです。\r\nAuto-Renewable Subscriptionsは特定のコンテンツにアクセスできる手段として、Non-Consumableはアプリ内の特定の機能にアクセスする手段としてよく使われます。\r\n消耗型のConsumableはゲームアプリ内の通貨などでよく用いられますが、Unityやcocos-2dxなどのフレームワークで開発されることが多く、ネイティブで実装されることは少ないです。\r\n事実、課金のネイティブ実装を検索しても、多くヒットするのはAuto-Renewable SubscriptionsやNon-Consumableです。\r\n\r\nこのセッションでは、公式ドキュメントを参考にしながらConsumableのネイティブ実装をした話を他の課金方式と比較しながら紹介します。","accepted":true,"speaker":{"name":"Takeshi Ihara","kana":"タケシ イハラ","twitter":"nonchalant0303","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/1cc2bd19-6233-4020-b390-cb498db4a7b5.jpg"},"created":"2019-06-05T01:57:04+09:00","timetable":{"track":"Track E","starts_at":"2019-09-06T16:50:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"8c0509d1-ec1d-4225-8e04-e92726f997d4","title":"Heart of Swift","abstract":"Value SemanticsとProtocol-Oriented ProgrammingはSwiftの根幹をなす概念です。Swiftの言語そのものや標準ライブラリ、SwiftUIの設計とも密接に関わっており、Swiftという言語を特徴づけるHeart（心、中心）と言えます。\r\n\r\nValue SemanticsとProtocol-Oriented Programmingについては、WWDC 2015でのSwift Core Teamメンバーによる解説がよく知られています。しかし当時はSwift 2ベータの時期で、解説に用いられたコードには現在Swift 5で動作しないものも多いです。\r\n\r\nまた、Swift 5.1で導入されるOpaque Result Type（ORT）や、その後を見据えて議論されているリバースジェネリクス、Generalized Existential、any修飾子との関係など、現在ではより広い視野でValue SemanticsとProtocol-Oriented Programmingを考えることができます。\r\n\r\niOSアプリ開発についても、WWDC 2019で発表されたSwiftUIによって、iOS 13以降状況が大きく変化しそうです。これまではUIKitを用いたクラスベースの開発が必須でした。しかし、SwiftUIではprotocolとstructが中心になり、ORTが多用されます。それらを使いこなすために、Value SemanticsとProtocol-Oriented Programmingの理解がますます重要になるでしょう。\r\n\r\n本トークでは、それらの関係を示しながらSwift 5.1時代のValue SemanticsとProtocol-Oriented Programmingを解説し、SwiftのHeartを描き出します。","accepted":true,"speaker":{"name":"Yuta Koshizawa","kana":"コシザワユウタ","twitter":"koher","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/10643a54-a90d-495b-a6c3-413b82a8ce81.gif"},"created":"2019-06-05T23:39:53+09:00","timetable":{"track":"Track B","starts_at":"2019-09-07T10:50:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"e173193d-08c9-4bde-8e78-173222da38f2","title":"iOSエンジニアでもできるIoTガジェット作成、基板発注もう何も怖くない","abstract":"iOSエンジニアなら一度は憧れるスマホ連携IoTガジェット。\r\niOSとの連携が簡単なマイコンや、簡単に基板を設計、発注する方法をご紹介します。\r\n自分だけのオリジナルIoTガジェットを作る楽しみが広がると嬉しいです！","accepted":true,"speaker":{"name":"Jumpei Ono","kana":"オノジュンペイ","twitter":"takoikatakotako","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/5c73e810-f74d-46b6-9b89-6932100b4e97.jpg"},"created":"2019-06-07T10:06:22+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T17:05:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"6c77df58-00f6-4623-8fe4-6bfac879fb00","title":"スナップショットテスト実戦投入","abstract":"SnapshotTestingやiOSSnapshotTestCaseなど、\r\nスクリーンショットによる差分検知フレームワークが近年注目されています。\r\nこれらは指定した画面のスクリーンショットを自動撮影し、\r\n予期せぬ表示上のデグレを検知してくれる画期的なツールです。\r\n\r\n一方私のプロダクトでは、状態再現の手間から来るQAコストの増加や\r\n新しいUI作成時の仕様認識のズレなどが課題となっていました。\r\n\r\nそこで改善のためSnapshotTestingを導入しQAコストの削減に取り組むことにました。\r\n\r\nしかし当然ながら、単純にViewを渡すだけではうまくいきません。\r\nなぜなら導入までに、下記のような下準備が必要なためです。\r\n\r\n- API通信をモックする\r\n- 必要な状態をモックできるレスポンスを考える\r\n- アプリ内フラグやログインをモックする\r\n- UIのモックが可能な設計にする\r\n- 自動テストとの連携\r\n\r\nなかなか一筋縄ではいかない導入でしたが、\r\n結果として画面のカタログを作成しデグレ検知に成功しました。\r\n本トークではスナップショットテストの導入にあたり、\r\n注意すべき点や知っておくと良い点についてお話します。\r\n導入のメリットに見合うかどうか、自身のプロダクトが抱えている課題を解決できそうか、\r\nその参考となる情報を提供できればと思います。","accepted":true,"speaker":{"name":"imaizume","kana":"イマイズミ","twitter":"imaizume","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/e285018e-0897-4f61-bc6c-953a450af002.jpg"},"created":"2019-06-07T19:52:50+09:00","timetable":{"track":"Track D","starts_at":"2019-09-07T10:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"9529444c-a849-47cd-94a7-bf2b694320aa","title":"Swiftプログラミングと論理 〜そして帰ってきた圏論〜","abstract":"「プログラミング」と「論理」の世界には直接的な対応関係があり、\r\n私たちが普段書いているSwiftにおいても例外ではありません。\r\n\r\n例えば、論理の世界における命題「AかつB」はタプル型 `(A, B)` 、\r\n「AならばB」は関数型 `A -> B` を使って書くことができます。\r\nこれらの型（命題）を組み合わせ、適用していくことで、\r\nあたかも論理式（や数式）を証明するかのように、アプリのプログラムが完成します。\r\n\r\nこの、「型 ⇔ 命題」、「プログラム ⇔ 証明」に対応することを「Curry-Howard同型対応」と言います。\r\nこの背景を知るには、「直感主義論理」と「型付きラムダ計算」の両方を学ぶことが重要です。\r\n\r\nそこで、この発表では、理論的基盤となる「古典命題論理・述語論理」「ラムダ計算」の基本をおさらいした後、\r\n「直感主義命題論理」「Curry-Howard同型対応」について、実際にSwift言語を使ってお話しします。\r\nまた、Swiftがサポートする「多相型」、「Protocol (Witness)」、「Opaque Result Type」等にも触れ、\r\n圏論の図式を使った、より手軽で簡単な解説も予定しています。\r\n\r\nなお、今回の発表は、昨年のiOSDCの発表の続編になります。\r\n事前の予習として、下記のスライドをご参考ください。\r\n\r\n代数的データ型 https:\/\/speakerdeck.com\/inamiy\/algebraic-data-type-in-swift\r\n圏論とSwiftへの応用 https:\/\/speakerdeck.com\/inamiy\/iosdc-japan-1","accepted":true,"speaker":{"name":"稲見 泰宏","kana":"イナミヤスヒロ","twitter":"inamiy","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/b1d24ab0-c7c0-4ab6-ac49-5cc397c240a0.jpg"},"created":"2019-06-08T21:58:47+09:00","timetable":{"track":"Track D","starts_at":"2019-09-06T16:00:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"14b44196-0f52-40b7-9924-588f5b0dc027","title":"ソーシャルライブサービスにおけるデジタル化粧の仕組みと実装","abstract":"デジタル化粧は、映像を加工することで実際にメイクをしているように見せる技術です。\r\n昨今では物理的なメイクを再現するだけでなく骨格や目の大きさを調整したりすることも出来るようになり、セルフィーを投稿する敷居を下げている技術の一つでもあります。\r\nそんな「顔のAR」とも呼べるデジタル化粧はソーシャルライブでは無くてはならない存在となりました。\r\n\r\nこのセッションではソーシャルライブサービスの実例を通して、デジタル化粧機能の需要の傾向や仕組みを学びます。\r\nまた、高価なデジタル化粧SDKを利用せずにMLやMetalを使って実装するにはどうすれば良いかを紹介します。","accepted":true,"speaker":{"name":"noppe","kana":"ノッペ","twitter":"noppefoxwolf","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/191c154d-44ab-48fa-b23a-d0c3ef31eeac.jpg"},"created":"2019-06-11T07:21:56+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"de50c56a-f1b4-43b6-917e-e0911c4bb78d","title":"フィードやチャットのスクロール\bを全力でなめらかにする","abstract":"UICollectionViewやUITableViewでセルの高さが可変なフィードやチャット画面を作る機会は多いと思います。\r\n\r\nそして作ったものを動かしてみると、スクロールが微妙にカクつきがあることに気づきます。\r\n\r\nInstagramやFacebookアプリのフィードはなぜあんなになめらかにスクロールできるのか？\r\n\r\n5分で実装方法をお話します！","accepted":true,"speaker":{"name":"Hiroshi Shikata","kana":"シカタ　ヒロシ","twitter":"dotrikun","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/e6b05c08-51f0-4437-9981-103e5f62da2c.png"},"created":"2019-06-12T16:55:33+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:50:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"28c5a85d-f597-46de-b597-8aea019777bc","title":"iPhone 設定をアプリから操作してらくらく環境構築","abstract":"iOS の設定は Configuration Profile という形式のファイルをインストールすると変更できることは、意外と知られていません。\r\nもし、これをアプリを通してインストールできれば、iOS 11 未満でも Wi-Fi を QR コードで繋げるなど様々な可能性が広がります。\r\n\r\nこの LT では、Configuration Profile によってできること、そしてアプリから Configuration Profile をインストールする方法を解説し、皆さんの iPhone 環境構築体験を豊かにするための知識を披露いたします。","accepted":true,"speaker":{"name":"Kuniwak","kana":"クニワック","twitter":"orga_chem","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/e871a2d6-8b5d-4d2b-869a-79cb2295796a.png"},"created":"2019-06-12T20:22:01+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:25:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"3b8c98a2-4861-449e-a2c9-e1327db431e2","title":"値オブジェクトへのCodable対応","abstract":"「API通信のデータをJSONで受け取ってEntityに変換する」、みなさんもそういったご経験はあるかと思います。\r\nSwift4でCodableが登場してから、このようなJSONデータをより簡単に変換できるようになりました。\r\n\r\n一方で、例えばEntityにユーザーIDや写真IDといった一意に識別する値を単純なInt型やString型で定義してしまうと、引数にユーザーIDを渡すべき関数で誤って同じ型である写真IDを渡してしまう恐れがあります。\r\nドメイン駆動設計(DDD)における値オブジェクト(Value Object)という戦術的設計を導入し、それぞれ異なる型として定義することで誤った代入を防ぐことができます。\r\n\r\nしかしながら、Codableと値オブジェクトの相性は悪く、対応するには工夫が必要となります。\r\nこのトークでは、簡単なJSONデータを用いて値オブジェクトを含むEntityへのCodable対応についてお話します。\r\n\r\n\r\n■アジェンダ\r\n・単純な型を利用した場合のCodable対応\r\n・単純な型を利用した場合の課題\r\n・値オブジェクトとは？\r\n・値オブジェクトとCodableの課題\r\n・値オブジェクトへのCodable対応方法","accepted":true,"speaker":{"name":"maguhiro","kana":"マグヒロ","twitter":"maguhiro","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/69902f7a-c2a3-4923-b656-6d65dc450303.jpg"},"created":"2019-06-13T10:33:37+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T17:15:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"123b9027-1aea-4557-997e-fd2c5275974b","title":"FatViewControllerを安全に書き換える方法が見つからなかったので、どういう痛みを許容するか考えた","abstract":"安全にリファクタリングを行うには「お約束」があります。\r\n\r\n「自動テストを書いてからリファクタリングする」\r\n\r\n言葉にしてしまえば簡単で「プログラマであれば\b当然のことだ」とおっしゃる方もいらっしゃるかもしれません。\r\nでもそれを難しくするのがヤツの存在です。そう、iOSエンジニアならば切っても切れない関係のFatViewControllerです。\r\n\r\n前述のお約束を守るために、こんな堂々巡りに陥ったことのある方は少なくないのではないでしょうか。\r\n・「UIテストを書いた上で書き換えを行うか？」「時間がかかりすぎる、ダメだ...！」\r\n・「ユニットテストを充実させて設計を変更しながら書き換えを行うか？」「先にプロダクトコードの変更が発生してしまう、ダメだ...！」\r\n\r\nこのトークではFatViewControllerの書き換えを「自動テストを書いてから」というお約束を守ってこなすのが難しかった話をします。\r\nそのうえでなるべく安全に、現実的に書き換えていく方法にはどんなものがあったか、どんな部分で安全を切り捨てて痛みに耐える判断をしたのか話をします。","accepted":true,"speaker":{"name":"ダンボー田中","kana":"ダンボータナカ","twitter":"ktanaka117","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/d6b65a82-42b9-4765-8180-b4673f234f38.jpg"},"created":"2019-06-13T14:49:46+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T15:10:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"b4b05cda-3ace-4a71-8bd1-3a648f164310","title":"縦書きエディタを6プラットフォームで開発してみて","abstract":"Windows \/ macOS \/ Ubuntu \/ iOS \/ Android \/ UWP向けに縦書きのできるテキストエディタを趣味で開発しています。\r\n小説や脚本などでいまだに根強い需要のある縦書きのテキスト入力を6プラットフォームに提供する唯一のプロダクトを目指しています。\r\n（Windows \/ macOS \/ Ubuntu \/ Androidでリリース済み、iOS版リリース予定、UWP版プロトタイプ完成済み）\r\n\r\nこのプロダクトでは全プラットフォームで同じ描画結果を手に入れるためにテキスト描画エンジンから自前で作っています。\r\nトークでは文字とコンピュータの関係、縦書きという特殊な書字方式とその裏側の実装、テキストエディタや組版、iOSやAndroidに限らないクロスプラットフォームなアプリ開発について話します。\r\n\r\n内容\r\n- テキストを表示するために必要な文字コードとフォントの知識\r\n- コア機能をC++で作る理由\r\n- デスクトップアプリとモバイルアプリを開発するための環境\r\n- デスクトップアプリのテキスト入力とモバイルアプリのテキスト入力\r\n- プラットフォームで千差万別なIMEという特異点\r\n- iOS \/ Androidの標準TextViewのUIとその縦書きでの再実装","accepted":true,"speaker":{"name":"六々","kana":"ロクロク","twitter":"496_","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/4b109918-c119-457f-987e-73411d4ccbb5.gif"},"created":"2019-06-13T16:39:22+09:00","timetable":{"track":"Track E","starts_at":"2019-09-06T10:50:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"1a25edb5-ff96-4453-8780-72a0158bb394","title":"令和時代のゲームボーイ開発 👾","abstract":"1989年に発売したゲームボーイは、今年30周年を迎えました。\r\nそんな今だからこそ、実機で動くゲームボーイ開発をしてみましょう！\r\n\r\n30年の時を経て、ゲームボーイが最新の技術で蘇ります。","accepted":true,"speaker":{"name":"ぎぎにゃん","kana":"ギギニャン","twitter":"giginet","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/7f58b7a1-82ad-4209-99de-c7c7e0b0fb4a.png"},"created":"2019-06-13T18:06:02+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:55:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"762f9e85-d71c-41e8-a891-d60d0129a355","title":"Xcodeのコードカバレッジ計測ではなぜブランチカバレッジが取れないのだろうか？","abstract":"テストコードを書いている場合、コードカバレッジを計測しているチームが多いのではないでしょうか。\r\n私たちはXcodeの機能を使えば簡単にコードカバレッジを計測することが可能です。\r\n\r\n一方でコードカバレッジにはいくつか種類があり、Xcodeではその一つであるステートメントカバレッジしか計測できないということをご存知でしょうか。\r\nカバレッジの種類によりどこまで厳密網羅されているかが変わってきます。\r\nその中でも分岐の網羅までチェックするものがブランチカバレッジと呼ばれます。\r\n\r\nお隣を見渡せばAndroidのJaCoCo\u001dではブランチカバレッジも計測することができます。\r\n\r\nではなぜ私たちの扱うXcodeではブランチカバレッジを計測することができないのでしょうか？\r\nそもそもSwiftでブランチカバレッジを計測することができないのでしょうか？\r\n\r\n本トークではそんなXcodeでのコードカバレッジ計測でブランチカバレッジを計測できない理由はなぜなのか、本当に計測することができないのか。\r\nそれをSwiftのカバレッジ計測の仕組みから解き明かしていきます。","accepted":true,"speaker":{"name":"kariad","kana":"カリアド","twitter":"kariad_uu","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/bc3724c3-6728-4b75-9791-b1875c391f82.png"},"created":"2019-06-13T18:20:05+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"faddde97-b0bc-411b-833b-4f2dd7b646c1","title":"SwiftUIでの開発に向けた我々が出来る既存アプリのリファクタリング","abstract":"WWDC2019でSwiftUIが発表され、iOSアプリ開発の新たな時代が幕を開けようとしています。\r\nしかしSwiftUIが使えるのはiOS13からです。では我々はiOS12が世間一般から退場するまで何も出来ないのでしょうか？\r\nそんなことはありません。来るべきSwiftUIでの開発に向けて我々が間違いなく行うべきことが１つあります。それはリファクタリングです。\r\nこのLTでは来るべきSwiftUIでの開発に備え、我々が今から出来る既存アプリのリファクタリングを大きく分けて3つ紹介します。\r\n- UI開発のコンポーネント思考化\r\n- プレゼンテーションとドメインの分離\r\n- 依存性注入の導入\r\nそしてなぜこれらを行うべきか、Appleが公式に一般公開しているSwiftUI Tutorialsの中から特に以下のトピックに注目しつつ、解説します。\r\n- Use UIKit and SwiftUI Views Together\r\n- BindableObject \/ EnvironmentObject\r\n- PreviewProvider","accepted":true,"speaker":{"name":"くろるり","kana":"クロルリ","twitter":"kuroruri","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/90615c24-99d2-47b0-8801-4d549179a38f.jpg"},"created":"2019-06-13T19:26:37+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:05:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"0a4ff74b-01fb-4054-938e-0fac9c8c6e03","title":"iOS 12以下でDark modeに対応した地獄の話","abstract":"私が個人的に開発している# Typeというアプリには、iOS 13が発表されるより前にRxSwiftを利用せずにDark mode機能を導入しました。導入するにあたって、\r\n\r\n- Dark mode機能の考え方\r\n- 実装方法\r\n- iOS 13以降への対応\r\n\r\nを紹介します。その上で実際にアプリにDark modeを導入する際に発生した表示崩れ修正地獄についても紹介します。","accepted":true,"speaker":{"name":"かっくん","kana":"カックン","twitter":"fromkk","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/ae96e5b3-11a8-4223-ba19-c8304e357352.jpg"},"created":"2019-06-13T19:49:53+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T15:50:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"e04ea30b-0363-4fe9-8501-841ed3261918","title":"LLDBデバッガで不具合の原因を特定して開発速度を上げよう","abstract":"アプリ開発の経験が無く、プログラミングそのものの経験も浅い、そんな初心者の困り事の一つは、不具合の原因を特定するのに多くの時間を費やしてしまうこと。\r\n原因特定スピードを上げるにはLLDBデバッガが有効です。\r\nXcode10.2から登場したvコマンドについて\r\n- vコマンドでわかること\r\n- vコマンドの操作手順\r\n- poコマンドとの違い\r\nをお話します。\r\nLLDBデバッガを活用した経験があまりない方や、poコマンドを普段使っていてvコマンドを使ったことがない方向けです。","accepted":true,"speaker":{"name":"クウルス","kana":"クウルス","twitter":"Qoo_Rus","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/7f9a2418-49dd-4e50-8bdc-2e916ba8f7f3.jpg"},"created":"2019-06-14T12:00:51+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:20:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"b9fb9fac-d193-4ed1-9740-496b7ac332bc","title":"俺たちのARKitでめちゃめちゃ表情豊かなVTuber向け表情トラッカーを作るぞ","abstract":"Animojiにも使われているTrueDepthカメラを使って3Dモデルの表情を動かす表情トラッカーを作りました。webカメラを用いて顔認識する他のシステムよりも精度高く、細かく、感情表現に必要な顔のパラメータを取得できるTrueDepthカメラの本気をお見せします。\r\n\r\n表情トラッキングの精度以外にも、ARKitのおかげでバーチャルYouTuberを運用するにあたって地味に嬉しい機能をたくさん獲得しているので、プロデュースの現場の目線から面白おかしく紹介できればと思います。","accepted":true,"speaker":{"name":"hiragram","kana":"ヒラグラム","twitter":"hiragram","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/02ce3bc9-9ec2-4a6d-adc6-8aa7504b3a85.png"},"created":"2019-06-14T13:04:14+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T15:45:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"50e7c0de-bfb4-4716-8a0b-1e728a43ff50","title":"Property Delegatesがもたらす新しいSwiftプログラミング","abstract":"Swift 5のiOS13から使用できる機能の一つにProperty Delegates(SE-0258)というものがあります。\r\nSwiftUIでも@StateなどすでにPropety Delegatesで実装されたものもあり、目にした方もいらっしゃると思います。\r\n\r\nProperty Delegatesはとてもユニークな機能で、これまで書いていたボイラープレートを解消できたり、アーキテクチャやコンポーネント設計を考える上でも、重要な機能の一つとなってくるのではないでしょうか？\r\n\r\nこの発表ではProperty Delegatesとはどのようなものなのかを紹介するとともに、\r\nどのような課題を解決するのか例を踏まえて紹介します。\r\n\r\n概要\r\nProperty Delegatesとは\r\n実装例の紹介(State、User Defaults、Validation)\r\nSwiftプログラミングにおける継承、抽象化、関心の分離などのこれまでの考え方などを踏まえたProperty Delegatesの役割の考察","accepted":true,"speaker":{"name":"darquro","kana":"ダークロ","twitter":"darquro","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/9266d57a-a89e-4221-ad22-8b6023240ad2.jpg"},"created":"2019-06-14T16:52:01+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:15:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"3a33e098-b3c4-4012-872f-ce56b4d2882c","title":"めくるめくシェーダアートの世界","abstract":"シェーダアートとは各ピクセルの座標値と共通のデータからそのピクセルの色を決定し、様々なイメージをスクリーン上に表現する手法のことです。時にシェーダ芸と呼ばれることもあります。\r\nこれは主にシェーダと呼ばれるGPUで実行されるプログラムを記述することで実現します。\r\n\r\n様々な手法が編み出され、そのシンプルな原理とは裏腹に実に多彩な表現が可能となっています。\r\n\r\nWeb上にはシェーダを閲覧\/投稿できるGLSL SandboxやShadertoyといったサイトがあり、多くの驚くべき作品を目にすることができます。\r\n\r\nもちろんWebに限らずiOSでもシェーダアートは実現できます。\r\n\r\n本セッションではまずシェーダアートの動作原理を解説します。\r\n次にstep関数やfract関数といったシェーダ用の組み込み関数をいくつか学んだ後、距離場・極座標など表現方法のヒントとなる概念に加えて、複製・ノイズなどの基本的なテクニックも紹介します。\r\n\r\nまた、共通データに時間を渡すことでアニメーションを行ったり、加速度センサーやマイクの音量を渡すことでインタラクティブな表現ができるデモも披露します。\r\nさらにレイトレーシングの一種であるレイマーチングを用いた3次元的な表現も紹介します。\r\n\r\n普段のプログラミングとはまた一味違う体験を、そしてあなた独自の世界を表現してみませんか？","accepted":true,"speaker":{"name":"Youichi Takatsu","kana":"タカツ　ヨウイチ","twitter":"ta_ka_tsu","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/09ec1eb6-908d-43ea-8948-4b85168745bf.jpg"},"created":"2019-06-14T23:23:27+09:00","timetable":{"track":"Track D","starts_at":"2019-09-06T10:50:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"8cec3433-83bd-48cd-a13d-6742430518d2","title":"モバイル決済アプリの作り方","abstract":"近年、モバイル決済アプリが非常に話題になっています。\r\nこのトークではそんなモバイル決済アプリの開発現場から、様々な技術的トピックについてiOSアプリ開発者視点からみなさんに共有します。\r\nモバイル決済アプリ開発特有のトピック、例えば\r\n- Apple Pay In-App Provisionig を用いたiD決済の仕組み\r\n- QRコードによるコード決済の仕組み\r\n- 銀行口座接続や顔認証＋公的証明書による本人確認手法技術について\r\n- 既存の巨大なアプリに対して、いかに安全・効率的にモバイル決済機能を追加するか\r\n- お金を扱うアプリとしてのセキュリティの重要性とその実現方法\r\n- モバイル決済アプリ開発の今後\r\nなどについてお話します。","accepted":true,"speaker":{"name":"kenmaz","kana":"ケンマツ","twitter":"kenmaz","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/dae56483-c2e5-4c71-9a0f-75b76b869c97.jpg"},"created":"2019-06-15T03:06:30+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T11:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"4e048f49-289b-4316-b4e6-e325a64c3793","title":"もし文系卒の女子エンジニアが 5年もののiOSアプリにユニットテストを導入しようとしたら","abstract":"登場人物\r\n文系卒の女子エンジニア\r\n・エンジニア歴＝社会人歴のiOSエンジニア\r\n・一部機能追加くらいはSwiftで開発できるようになった\r\n・テストは業務で全く書いたこと無し\r\n\r\n5年もののiOSアプリ\r\n・2013年リリースで、リリース当時のコードも現役でバリバリ稼働中\r\n・リリース当時はフルObjective-C、現在は一部Swift化\r\n・テストコードは1行も無し\r\n\r\nこのLTではテストを書いたことないエンジニアが、年季の入ったアプリにユニットテストを導入するまでの格闘をテスト初心者視点から語ります。\r\n\r\nまだテストを書いたことがない方、うちのアプリはレガシーすぎてテストなんて書けないと思っている方が、\r\nテストを書いてみよう！と思ってくれることを目標としています。","accepted":true,"speaker":{"name":"Matsui Mai","kana":"マツイマイ","twitter":"Ni5_21maimai","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/bf76ba10-6d3d-4793-8fd3-92e360c28c77.jpg"},"created":"2019-06-15T18:50:06+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:55:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"d51e7062-2eb1-4a86-bf5f-4928fa3b04c8","title":"iOSアプリのリジェクトリスクを早期に発見するための取り組み","abstract":"iOSアプリ開発は年々複雑化しています。次々と追加される新デバイスや新しいAPIへの対応など技術的な要因はいくつかありますが、それ以外にも更新され続けているApp Store Reviewガイドラインやその他のApp Storeに提出できるアプリの要件を遵守する必要があるのもその要因の1つです。\r\n\r\nガイドラインや提出できるアプリの要件は日々修正、追加されているため常に最新情報を把握することは難しいです。ですがこれを怠ってしまうと、いざリリースという段階になってリジェクトされてしまい、思わぬ対応コストとスケジュールの変更を余儀なくされる可能性があります。\r\n\r\nこの問題を解決するため、ビルドされたアプリに対してガイドラインやApp Storeに提出できるアプリの要件を遵守できているか機械的にチェックするツールを作成しました。このツールはFastlaneプラグインとして提供され、Fastlaneによるビルドパイプラインに簡単に組み込むことが可能です。ツールによるチェック結果はコンソールログ以外にHTMLレポートとして出力が可能で、検証を担当されているQAチームと連携してリリース前の段階でアプリに問題が無いことを確認しています。\r\n\r\n本発表では以下の内容をお話しします\r\n\r\n- このツールを開発した経緯\r\n- 実際にどのような項目をチェックしているのか\r\n- チェック機能の実装方法\r\n- QAチームとの連携\r\n- ガイドラインを追い続けるための情報源\r\n\r\niOS開発においてApp Store ReviewガイドラインとApp Storeに提出できるアプリの要件を満たすために気をつけるべき注意点と、今回紹介するチェックツールと同様のものを自作するために必要な知識を持ち帰ってもらいたいと思います。","accepted":true,"speaker":{"name":"Kesin11","kana":"ケシン","twitter":"Kesin11","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/3887f8a1-39a7-4071-81ae-3492451a264c.jpg"},"created":"2019-06-15T22:17:37+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T15:10:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"ccb52efe-bd6e-4e73-9162-c9f5997c9545","title":"SwiftyMath で学ぶ数学（抽象代数学）","abstract":"iOSDC 2017 でのトーク「Swift で数学のススメ」から 2年を経て、 SwiftyMath は ver 1.0 となりました。\r\nこのトークでは SwiftyMath のコードをベースに、抽象代数学の入門として\r\n\r\n・基礎的な概念である「群・環・体」\r\n・具体例としての数（整数・有理数・実数・複素数）・行列・多項式\r\n・剰余類環、中国剰余定理、代数拡大\r\n\r\nなどについて解説します。これらの概念は数学専攻で学ぶもので、初学者にはハードルの高いものですが、抽象的な公理を protocol として、具体的な対象を struct として実装したコードと合わせて解説することで、Swift に慣れている人ならスンナリと理解できるようになることを目指します。\r\n\r\nSwiftで代数学入門： https:\/\/qiita.com\/taketo1024\/items\/bd356c59dc0559ee9a0b\r\nSwiftyMath： https:\/\/github.com\/taketo1024\/SwiftyMath","accepted":true,"speaker":{"name":"さのたけと","kana":"サノタケト","twitter":"taketo1024","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/c0073493-73e7-48c4-acdd-72c855c23189.jpg"},"created":"2019-06-15T22:47:47+09:00","timetable":{"track":"Track D","starts_at":"2019-09-07T14:20:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"1682af8a-9c94-4040-9f0c-086c81aea9a3","title":"実践 CallKit\/PushKit ときどき🐛退治","abstract":"みなさんは音声通話機能を実装したことがありますか？\r\n\r\niOS 10 から導入された CallKit を使うと、純正電話アプリのような見た目の着信画面や通話中画面を表示することができます。また、割込通話や割込通話による保留と保留解除なども簡単に対応できます。\r\n\r\nそんな素晴らしいフレームワークですが、いつまにか Apple 公式サンプルコードは提供されなくなり、ドキュメントや Web 上の記事などを頼りに試行錯誤する必要があるのが現状です。\r\n\r\nこのトークでは、バックエンドに Twilio を用いて、PushKit と CallKit を使用して通話機能を実装する過程で得た知見を共有します。\r\n具体的には、CallKit および PushKit の概要および使い方、効率的なデバッグ方法に加え、Twilio のワークアラウンドや、気づきにくい致命的な CallKit のバグと、それにどう対処したのかについてもご紹介します。","accepted":true,"speaker":{"name":"monoqlo","kana":"モノクロ","twitter":"monoqlo","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/ac51af72-ee48-418e-9a35-6e6de4cd3804.jpg"},"created":"2019-06-16T08:42:17+09:00","timetable":{"track":"Track E","starts_at":"2019-09-07T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"c2a89fff-ce66-4821-b2d4-4b7b6ff293d5","title":"Swiftのスタック変数とCPUレジスタの関係を読み解いた","abstract":"このLTはコードの解説というよりは体験共有に比重を置いたLTです\r\n\r\nSwiftの関数内でIntのような型(struct)のインスタンスを確保すると、スタックのメモリ領域に格納されるということは過去のWWDCセッションでも語られています。「スタック」とはメインメモリ上の領域です。CPUが演算をするときには「レジスタ」という高速なデータ領域を利用します。メインメモリはCPUのレジスタに比べてとてもアクセス速度が遅いことが知られています。一般的には変数は「スタック」に確保することになっていますが、実際にはCPUレジスタを使って高速化したほうがよい気がしますよね? しているはずですよね? でも確証がありません。\r\n\r\n決してSwiftコンパイラに詳しくない私は自分で調査するという発想になかなかならず、疑問を抱えたまま過ごしていました。\r\nWWDC19に参加することができたので、かねてよりの疑問をのラボで聞きました。しかし直接の回答にはたどり着けません。いただいたアドバイスは「LLVM IRとかアセンブラ読むといろいろわかって面白いよ」と。\r\n覚悟を決めて、LLVM IRやARM64のアセンブラを読みました。\r\n\r\n雰囲気で「こう動いている気がする」と思っていたことが明確になり「Swiftわからない」という気持ちが減りました。そして、その過程はとても面白い体験となりました。\r\n\r\n決してSwiftコンパイラに詳しくない私が、どのように結論にたどり着いたのかの体験を共有します。","accepted":true,"speaker":{"name":"rikusouda","kana":"りくそうだ","twitter":"rikusouda","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/1c56b174-74a5-4e81-839b-d139f0d61195.jpg"},"created":"2019-06-16T15:30:39+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T15:55:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"a3126674-646c-402a-8d15-69080fd7efe3","title":"サービスにおけるデザインシステムの構築","abstract":"モバイル開発をしている上でデザインとの関係性は切手は切れない関係だとお思います。\r\nまた、プロダクト自体も成長に伴い複雑性がましてきました。そのときに私はデザインシステム\r\nに注目して様々なアプローチしてきました。\r\n\r\n本発表ではあまり馴染みではない「デザインシステム」はどういうものなのかという基本的な話から\r\nではどのようにしてプロダクトにデザインシステムを導入し、どこまで何をしていったのか\r\nエンジニアリングを持って何を解決していったのかを解説します。\r\n\r\n概要\r\n- デザインシステムの基礎\r\n- 導入にあたって\r\n- エンジニア側からできること\r\n    - カラー管理・自動化\r\n    - 画像管理\r\n    - インタラクション","accepted":true,"speaker":{"name":"nakajijapan","kana":"ナカジジャパン","twitter":"nakajijapan","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/039a7f8d-a25c-44a0-9eee-4e606938987c.png"},"created":"2019-06-16T16:02:46+09:00","timetable":{"track":"Track D","starts_at":"2019-09-06T15:10:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"a972c654-1928-47e7-ba2a-24eb5152fecc","title":"今こそ理解しよう、輸出コンプライアンス","abstract":"iOSアプリを審査に提出するときに回答が必要となる「輸出コンプライアンス情報」についての質問。あなたは毎回、正しく理解して最適な答えを選ぶことが出来ている、と胸を張って言えますか？\r\n\r\nHTTPSも暗号化に含まれるの？暗号化を使用しているけれど、EAR（米国輸出管理規則）の免除資格を満たしているか曖昧だ、など不安を抱えながら回答している、という方もいらっしゃるのではないでしょうか。\r\n\r\n本トークでは5分間でフローチャートを交えながらこの「輸出コンプライアンス情報」にあなたのアプリがどう回答するべきなのかを説明します。このトークさえしっかり聞けば、明日以降のiOSアプリの申請では自信を持って「輸出コンプライアンス情報」に回答することができるようになるでしょう。","accepted":true,"speaker":{"name":"坂本 和大","kana":"サカモトカズヒロ","twitter":"kazu0620","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/426395bb-4ffe-4443-9ba7-a678350311f8.jpg"},"created":"2019-06-16T16:54:07+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:10:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"940b3857-749f-4f9e-a740-71761fe53627","title":"すべての人のためのアクセシビリティ対応","abstract":"あらゆる人が、あなたの提供するアプリの恩恵を受けられるように。\r\nあらゆる人が、あなたの提供するアプリをより便利に使えるように。\r\n\r\nアクセシビリティ対応と言うと特定の誰かのための対応だと思われ、優先度が低くなってしまいがちです。確かにアクセシビリティ対応は特定の誰かのための対応という側面もありますが、すべての人のための対応でもあります。いつも使っているアプリが、手を使わずに使えるようになったら。もっと使う手間を省けたら。夢は広がるばかりです。\r\n\r\n「とはいえアクセシビリティ対応をしても一般ユーザは使ってくれないのでは？」そう思う方もいると思います。しかしアクセシビリティ対応で可能になることをきちんと理解して実装、広く告知をすれば、一般ユーザも便利に使えるような体験革命ができるかもしれません。\r\n\r\nこのトークでは、Appleがどのようなアクセシビリティ機能を提供しているのか、そして私たちiOSアプリ開発者はどのような実装を経て、どのような体験をユーザに提供できるのかについてお話します。\r\n\r\n【目次】\r\n\r\n・アクセシビリティ最新情報（WWDC2019 Keynoteより）\r\n・設定 - 一般 - アクセシビリティから何ができるのか\r\n・視覚のアクセシビリティ\r\n　・文字サイズの変更に耐えうるデザイン作り\r\n　・VoiceOverにきちんと対応するには\r\n　・アプリデザインとコントラスト\r\n・聴覚のアクセシビリティ\r\n　・Siriはどこまでユーザを楽にするのか\r\n・身体のアクセシビリティ\r\n　・Voice Controlに見るアプリの未来","accepted":true,"speaker":{"name":"akatsuki174","kana":"あかつき","twitter":"akatsuki174","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/04c7a269-1283-42f2-86b8-afca89cc26f2.jpg"},"created":"2019-06-16T17:06:00+09:00","timetable":{"track":"Track E","starts_at":"2019-09-07T14:20:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"2c0d8d55-9ee0-4443-ad99-06385c3a22e6","title":"Amazon Pinpoint でユーザーに合わせたプッシュ通知を実現する","abstract":"プッシュ通知の配信といえば Firebase を思い浮かべる方が多いと思いますが、\r\nAWS でも Pinpoint というサービスを使うことで、プッシュ通知のセグメント送信をすることができます。\r\nさらに、 AWS Pinpoint では AWS Lambda を使ってセグメントをカスタマイズすることができるため、\r\nほかの AWS リソースのユーザー情報をもとに通知内容をユーザーごとに変更することまでできます。\r\nまた、ユーザーに複数のチャネルを割り当てることができるため、プッシュメールとプッシュ通知を使い分ける、といったことも可能です。\r\n\r\n本 LT では、 Pinpoint を用いたプッシュ通知の配信から、こうしたユーザーごとのカスタマイズまでを扱います。\r\n特に普段のアプリのバックエンドで AWS を活用しており、通知配信も AWS 内で行いたい方の参考になれば幸いです。","accepted":true,"speaker":{"name":"kiwi","kana":"キウイ","twitter":"koga_wiwi","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/084ebfaf-8139-4b31-bd6e-baaebf4912d4.jpg"},"created":"2019-06-16T17:29:45+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:30:00+09:00","length_min":5},"video_url":"https:\/\/www.youtube.com\/watch?v=dGCe30gy_bU&t=2240","feedback":{"open":false}},{"uuid":"f48c494e-0ae2-468b-bb8e-57fcef43e499","title":"iOSDCのプロポーサル判別器をつくろう","abstract":"今年もiOSDCのプロポーサルを考える季節がやってきましたね。一人でたくさん応募できるので、たくさん書くぞ！と息巻きます。かといって、たくさん出すのは骨が折れます。もし、採択されるかどうか事前にわかれば…？\r\n\r\nこのトークでは、iOSDC4年分のプロポーサルを使って、判別機を作成し、実際に採択されるか判別してみます。","accepted":true,"speaker":{"name":"Daiki Matsudate","kana":"マツダテダイキ","twitter":"d_date","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/3e8e4b99-1c45-4ca3-a1b9-945778a76795.jpg"},"created":"2019-06-16T19:02:58+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:30:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"7b99f91a-25e0-4d9c-b05f-fec111c11693","title":"Write the \"code\", Change the world. 〜エンジニアと法律〜","abstract":"iOSエンジニアが転生してブロックチェーンエンジニアになりました。\r\nと思いきや、私はいま、暗号資産関連の法改正に向けて、法律を学び、調査報告や提言、要望を作成しています。\r\nこれは、アプリケーション開発の前の、開発環境構築の前の、社会環境構築です。\r\nプログラムも法律も\"Code\"です。どちらも世界を変えるものでしょう。\r\nWrite the \"code\", Change the world.\r\n日本は民主主義です。ソースコード以外にも、私達が世界を変えるためにコミットできるコードがあります。\r\nCoinhiveやアラートループが逮捕されるこんな時代だからこそ、私達がすべきコミットがあるのではないでしょうか。","accepted":true,"speaker":{"name":"niwatako","kana":"にわタコ","twitter":"niwatako","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/fbdfd13d-531d-48fd-a83a-9c2fda361733.jpg"},"created":"2019-06-16T21:14:19+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:35:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"3c30c4b4-a647-4198-8e8c-e8100293ee93","title":"画像処理における、UIImageとCGImageとCIImageの効果的な使い分け","abstract":"UIImage、CGImage、そしてCIImageは、いずれも画像情報を保持するためのクラス(以下、画像クラス)ですが、皆さんはこの3つのクラスの特徴を理解して使っていますか？\r\n\r\nWeb APIで取得した画像を縮小して表示できればよい、といった単純な要件であれば、何も考えずにUIImageを使うだけでも済みますが、リアルタイム処理や複雑な画像処理などのより高度な要件においては、特徴を知らずに使ってしまうと余計な処理を書いてしまって最悪性能低下を招くことになってしまいます。\r\n\r\n本セッションでは、UIImage \/ CGImage \/ CIImageの各画像クラスの特徴を解説しながら、これら3つのクラスの画像処理における使いどころについてご紹介します。\r\n\r\nまた、OpenCVなどの画像処理ライブラリとの連携を考慮した画像クラスの使い方や、私が業務で実際に画像処理の性能改善に成功したエピソードもご紹介します。\r\n\r\n本セッションが普段何気なく使っている画像クラスについて改めて考えるきっかけとなれば幸いです。\r\n\r\n- 発表内容アジェンダ\r\n  1. UIImageとCGImageとCIImageの概要や特徴\r\n  2. 特徴を踏まえた各画像クラスの使いどころ\r\n  3. OpenCVなどの画像処理ライブラリとの連携を踏まえた画像クラスの使い分け\r\n  4. 業務で実装したリアルタイム画像処理の処理性能を改善した体験談","accepted":true,"speaker":{"name":"栗山徹","kana":"クリヤマトオル","twitter":"kotetu","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/28aa5805-bf54-4d46-91f0-a5e860c38dde.jpg"},"created":"2019-06-16T21:52:51+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T14:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"03ae470b-93aa-43d7-aa40-b8cfd945bce1","title":"AR Quick Lookを家具ECサイトに導入した話","abstract":"iOS12からAR Quick Look機能が搭載されました。\r\nAR Quick LookはUSDZファイルを設置するだけでSafari等のアプリで3DモデルをAR表示することが出来ます。\r\nハードウェアやARKitの進化によりARの体験も確実に向上しています。\r\nUSDZファイルをサイトに設置することでその恩恵を受けつつユーザー体験やコンバージョンを向上させましょう。\r\nこのトークでは、家具ECサイトに導入した事例を元にAR Quick Lookの概要、3Dモデリング、Tips、効果等を紹介します。","accepted":true,"speaker":{"name":"NESS","kana":"ネス","twitter":"nesskazu","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/9c62f870-d2d9-4cad-9b03-8ce29516ad2e.jpg"},"created":"2019-06-16T22:24:12+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T17:00:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"26a8fdfb-5a41-4c69-b27c-aca7348e6bd4","title":"Core MLで実現する爆速のARサイズ計測","abstract":"iOS12から搭載されたAR Measureアプリは、ARKitの精度を証明するとともに、現実のものを何でもスマホで測ることができるという世界を実現しました。しかし、AR Measureの操作には慣れが必要だったり、自分でスマホを持った状態で動き回らなくてはいけないという課題が存在します。そんな課題をCore ML、すなわち「機械学習」を使って解決することができます。例えばフリマアプリなどで服を売りたい時、服の着丈、身幅、肩幅、袖丈などを載せたいと思う人がいると思います。このようにあらかじめ測定したい場所・指標が決まっている場合、機械学習でそれらを測るために必要な点群の位置を推定することができます。点群の位置さえ推定できれば、ユーザーがわざわざARで測らなくても、平面認識と深度推定によって自動的に現実物のサイズを得ることができます。つまり、機械学習で「どこを測るか」を決めて、ARで「それが現実世界でどのくらいの長さなのか\u0010」を決めます。今回はTシャツを例に、その着丈、身幅、肩幅、袖丈をARKitとCore MLを使って一瞬でサイズ測定するプロトタイプをお見せします。今回のプロトタイプを応用すれば、インテリアや\u0010人の身長など、様々なものを一瞬で測ることができるようになります。この発表では、機械学習によっていかにARのサイズ計測が簡単かつ速くなるか、というお話と、それによって実現できた精度とその改善方法、その過程で使用したモデルなど技術的な知見を共有します！","accepted":true,"speaker":{"name":"Kohei Arai","kana":"コウヘイ アライ","twitter":"kokoheia","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/f864cc55-b5e6-49c9-8b8a-e23f2120cbea.jpg"},"created":"2019-06-16T23:04:53+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:25:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"a2e9b461-2c0d-47c5-b3cc-cef012e3f260","title":"iPhoneのカメラで写真撮影から現像までの技術を紐解く","abstract":"iPhoneやスマートフォンにおける「カメラ」という機能。\r\n写真を撮る、という日常的に行われている行動ではありますが、その実撮影という機能を実現するために様々な技術的処理が使われています。\r\n\r\nこのセッションでは、「カメラが光を取り込む仕組み」から「iOSで取り込んだデータを画像化する」という所を深掘りし\r\n写真撮影という技術を皆さんと一緒に紐解いていければと思います。\r\n\r\n以下、アジェンダ(仮)\r\n\r\n1. そもそもの「写真撮影」における仕組み\r\n2. 写真の表現を決める3つの値 F値・シャッタースピード・ISO感度\r\n3. iPhoneにおける「被写界深度撮影」とは\r\n4. iOSでマニュアル撮影アプリを作る\r\n5. RAW画像とは\r\n6. iOSでRAWを加工してみる","accepted":true,"speaker":{"name":"satoshin21","kana":"サトシン","twitter":"satoshin21","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/2552b490-5c39-4770-8a3c-06f4260f2ddd.jpeg"},"created":"2019-06-16T23:10:58+09:00","timetable":{"track":"Track B","starts_at":"2019-09-07T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"3c2b7111-cdf3-43bb-81b8-446424b3f25c","title":"Swift Playgrounds でタートルグラフィックスしよう！🐢","abstract":"みなさん LOGO というプログラミング言語はご存知でしょうか？私は中学生の時にこの言語のタートル・グラフィックスという機能でプログラミングの楽しさを知り、現在 iOS のエンジニアをしています。\r\n\r\n2016年7月、その LOGO とタートル・グラフィックスの生みの親であるシーモア・パパート氏の訃報をきっかけに、Swift 製タートル・グラフィックスの開発を始めました。同年の WWDC で発表された Swift Playgrounds で動かすことができれば、子どもたち（私の息子も含め）に iPad で私の中学生時代と同じ体験をしてもらえるかもしれないと思ったからです。\r\n\r\nこのトークでは、私が作っている Swift Playgrounds で動くタートル・グラフィックスについて、次のような構成でお話しする予定です。\r\n\r\n- LOGOとタートル・グラフィックスについて、そして後世に与えた影響\r\n- Swift, CoreGraphics, CoreAnimation によるタートルグラフィックスの実装\r\n- Playground Book の作り方と、Subscriptions による配布方法\r\n- Swift Playgrounds 動くタートル・グラフィックスを配布して起きたこと","accepted":true,"speaker":{"name":"Tomoki Kobayashi","kana":"コバヤシトモキ","twitter":"temoki","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/e9fcb436-4cfe-4280-a0de-1bd39ccd270a.jpg"},"created":"2019-06-17T00:28:29+09:00","timetable":{"track":"Track E","starts_at":"2019-09-06T14:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"a91e43f1-40c4-426f-abec-86ea3f1b463d","title":"個人開発のアプリが輝くために","abstract":"AppStoreを見渡すと、数え切れないほどの膨大な数のアプリが存在する。\r\nしかしながら私たちがよく使うアプリというのはその中のほんの一部に限らている。例えば、Twitter、Instagramなど、ほとんどが大企業の開発したものだ。\r\n\r\nそれでは個人デベロッパーが開発したアプリが陽の光を浴びることはないのだろうか？\r\n\r\nこのセッションでは私が個人開発したアプリが100万DLされるまでの取り組みや改善などを中心に、プロモーションにお金を費やすことのできない個人開発のアプリをより多くの人に利用してもらうための手法やアイディアについてお伝えします。\r\nあなたが作ったアプリをもっと多くの人たちに利用してもらい開発へのモチベーションを高めていきましょう！\r\n\r\n- AppStore内の検索ロジック\r\n- 今日のAppの仕組み\r\n- 効果的なASO\r\n- ランキングロジックの考察\r\n- WWDC - App Store Labで得た知見","accepted":true,"speaker":{"name":"ahiru_starrr","kana":"アヒルスター","twitter":"ahiru_starrr","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/92124d2a-1201-4896-96de-39d1d84c8e5d.jpg"},"created":"2019-06-17T01:09:09+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T17:05:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"9a13322e-7627-4b60-997e-31e5098ab146","title":"モノレポで複数アプリをリリースする場合のGit運用戦略","abstract":"GoogleやFacebookといった大規模開発では、モノレポと呼ばれる1リポジトリで複数のアプリケーションを運用するフローが取られており、実装の共通化が計れるなど、多大なメリットを享受することができます。\r\nしかし、モノレポでの運用ではBitriseなどのCICDツールへの影響は大きな課題となります。\r\nリリースフローのロジック、各種パラメータを分離するためには、どのアプリケーションへのリリースアクションなのかを正しくCIツール側がフックできるようにしなくてはいけません。\r\nまた、複数リリースフローが走った場合にhotfixは正しくmasterブランチに、場合によっては別のリリースフローに対しても反映させる必要があります。\r\n本トークでは実際にチームで複数のリリースフローを同一レポジトリで共存させた経験から、その解決策を余すことなくお話しします。\r\n\r\n- モノレポ戦略時のGitHubFlow、GitFlow、GitlabFlowへの影響\r\n- モノレポ戦略時に起こりうる事故\r\n- 運用フローでどうやってそれを防ぐか","accepted":true,"speaker":{"name":"nade","kana":"ナデ","twitter":"kazuma_nagano","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg"},"created":"2019-06-17T01:34:40+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:00:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"92904657-beda-46fe-8ecb-b27c75ee0f16","title":"Swiftでつくるファミコンエミュレータのススメ","abstract":"低レイヤーを触ってみたいと思いつつも今まで手が出すことができていなかった私が、今現在Swiftでファミコンエミュレータを作っています（現在進行形）\r\nこのトークでは、Swiftを使ってファミコンエミュレータを開発することの楽しさをお伝えします。\r\nファミコンエミュレータ開発の第一歩がなかなか踏み出せない方の背中を押すことができたら幸いです。","accepted":true,"speaker":{"name":"thara","kana":"ティーハラ","twitter":"zetta1985","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/13a52dac-2de2-4f63-b3ac-8600e32e3320.png"},"created":"2019-06-17T02:43:59+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T17:15:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"67937abf-5580-4000-a122-334583471ee0","title":"1ヶ月半でプッシュ通知許諾率を17％から40％にあげた話","abstract":"マーケチームから来る「あくつ〜。プッシュ通知許諾率あげてくれないとリテンション施策打てないよ〜」という声。\r\n\r\n平均30％と言われる承諾率だが、何故か僕たちのアプリは17%・・。\r\n\r\nプッシュ通知承諾パネルを表示するタイミングは、熟考された上に以下の２つのタイミング。\r\n- お気に入りにアイテムを追加した時（新しくお気に入り商品が投稿された事を通知するため）\r\n- 商品の購入が完了し、取引が始まった時（取引のリマインドのための通知を送りたいため）\r\n\r\n何が悪いのかさっぱりでしたが、意外なことで解決しました。\r\nある１つのことをしただけで、プッシュ通知許諾率が全体平均17％から40％にあがったワケとは！？\r\n拘りの強いiOSエンジニア（デザイナー）が陥りやすい罠についてサクッと話します。","accepted":true,"speaker":{"name":"akutsu","kana":"アクツ","twitter":"sky_83325","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/e43478f9-d135-49c2-a7ad-a63cf04c2b1a.jpg"},"created":"2019-06-17T03:58:54+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T16:30:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"96c090c9-4db7-4d63-b112-541d8b2d3512","title":"tvOS 13にちょっと注目してみる","abstract":"WWDC19、一番始めの発表はtvOS 13でした。\r\nマルチユーザ やコントローラーの対応で一見要点をおさえた気になりがちですが、待ってください。\r\n\r\nTVServicesを含むフレームワークのアップデートにより、tvOS 13では、従来に比べてより充実したユーザエクスペリエンスを実装することが求められています。\r\n\r\n\r\nこのセッションでは、以下のような項目でtvOS 13の新たな機能の勘所をおさえ、より”immersive”な体験の実装手段をご紹介します。\r\n\r\n\r\n-\t ストリーミングデバイス(Apple TV)の動向\r\n-\tTVServices frameworkで何が変わったのか( ex. Top Shelf extension, Carousel , etc.) \r\n-\ttvOS 13 でのUXのベストプラクティスとは","accepted":true,"speaker":{"name":"redryerye","kana":"レッドライライ","twitter":"redryerye","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/ad874c1f-58b3-4d35-8f85-59ce265d6811.jpg"},"created":"2019-06-17T04:40:40+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T17:00:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"5b52db68-8c8a-49ba-9d00-d9a9b25a33b7","title":"クロマキー合成を使い透過動画をAR空間に表示する","abstract":"動画を現実の風景に重ね、その一部を透過させて再生する実装について説明します。\r\n\r\nAR(Augmented Reality)空間でシンプルに動画再生するのはそれほど難しくありません。\r\nしかし一部透過させようとするとリアルタイム画像加工をする必要があり難易度が高まります。\r\n\r\n表示のガタつきを抑え、一部を透過させた動画を再生するには。\r\n60fpsかつ音声付きで再生するにはどうしたら良いのでしょうか。\r\n\r\nクロマキーシェーダーと再生処理の工夫により実現した実装とその他Tipsを共有します。\r\n\r\nこの発表では以下の内容について話す予定です:\r\n- クロマキー合成シェーダーの実装\r\n- 60fps音声付きでの透過動画のスムーズな表示\r\n- リアルタイム配信映像の受信について","accepted":true,"speaker":{"name":"satoshi0212","kana":"サトシ","twitter":"shmdevelop","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/4c276844-a3e6-4afd-a1c7-568ae49478ce.jpg"},"created":"2019-06-17T04:52:45+09:00","timetable":{"track":"Track E","starts_at":"2019-09-06T15:10:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"80d31384-c8e6-4813-8b6b-568ed0eb9b20","title":"SwiftのStringの文字数の数え方を完全理解する","abstract":"SwiftはUnicodeの扱いに非常に長けた言語であり、絵文字を含む文字列でも正しい文字数を計算してくれます。\r\nその反面、Unicodeの複雑さに引きずられてしまい、直感的な操作ができない時もあります。たとえば、 string[2] と書いても3番目の文字を取得することはできません。\r\n\r\nそんな複雑なところのあるSwiftの文字列処理ですが、複雑なものを受け入れてきちんと理解するのはそこまで難しいものではありません。\r\n\r\nこのトークでは、Unicodeとの関係を意識しながら、Swiftの文字数の扱い方とその裏にある考え方を解説します。","accepted":true,"speaker":{"name":"Takanori Hirobe","kana":"タカノリ ヒロベ","twitter":"taka1068","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/999dd92c-8da5-4d7c-92f9-f0e4acc0dad0.jpg"},"created":"2019-06-17T05:24:05+09:00","timetable":{"track":"Track B","starts_at":"2019-09-05T17:50:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"df2f3aae-4347-4f17-91c2-db2ce476db10","title":"実機の管理とおさらば！AWS Device FarmでiOSのテストをしよう！","abstract":"みなさん、iOSアプリのテスト書いていますか？どのように実行していますか？\r\nひと昔前と違い、今やiOSデバイスは多種多様となり、アプリを安心してユーザに届けるには出来るだけ多くのデバイスで確認する必要が出てきました。新しいデバイスが発売されるたびに買い足さねばなりませんし、チーム内で融通したり管理するのはそれだけで大変です。\r\n\r\nAWS Device Farmを使うと、自分たちが持っていないバージョンのiOSデバイスでバグが報告された場合もリモートアクセス機能を使ってすぐに動作確認をすることができます。また、CI\/CDパイプラインに組み込んで自動テストを実行することも簡単に行なえます。\r\n\r\nこのセッションではまずDevice Farmを利用するためのステップをひとつずつ分かりやすく紹介します。そして次に、iOSにおける自動テストやUIテストについて説明し、XCTestやXCUITestを実際に実行してテストのイテレーションを回す実例を解説します。","accepted":true,"speaker":{"name":"白山 文彦","kana":"シロヤマ フミヒコ","twitter":"fushiroyama","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/8d2794b3-cc44-470c-9879-51cc5dbcb81b.jpg"},"created":"2019-06-17T06:22:26+09:00","timetable":{"track":"Track E","starts_at":"2019-09-06T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"28d1013f-a57b-4d42-b486-a3372c459459","title":"ライブラリのインポートとリンクの仕組み完全解説","abstract":"現代のアプリ開発では、ライブラリやフレームワークをまったく使わないということはほとんどありません。\r\nOSが提供するUIKitやSwift標準ライブラリを使用しますし、サードバーティの便利なライブラリを使用することもあります。\r\n\r\nそして、誰もが１度はリンクエラーや重複したシンボル、パッケージマネージャが出力するエラーメッセージに悩んだことがあることでしょう。\r\nリンクエラーの解決が難しいのは、問題の原因がプロジェクト設定、ライブラリの種類・配布方法、実行先（デバイスやシミュレータ）の環境など多岐にわたるためです。\r\n\r\n導入したライブラリがインポートできない、リンクエラーで難しいエラーメッセージが表示されている、ビルドは成功しても起動時にクラッシュしてしまう。\r\n誰もが一度はこのような問題に直面し、解決のために長い時間の試行錯誤をしたことがあるでしょう。\r\n\r\nモジュールのインポート・リンクがどのように解決されるのか、リンクとはいったい何をしているのかを学ぶことで、システマチックに問題を切り分け、解決できるようになります。\r\n\r\nこの講演ではライブラリとフレームワーク、スタティックとダイナミックの違い、それぞれのメリットとデメリット、Swiftからインポートするために必要なこと\r\nを知り、外部のライブラリがどのようにして自分のアプリから利用できるようになるかという仕組みを解説します。\r\n\r\nリンクの仕組みを知ることで悩ましいリンクエラーを論理に解決できるようになるとともに、CocoaPods、Carthage、Swift Package Managerといったライブラリ管理ツールもより高度に使いこなせるようになります。","accepted":true,"speaker":{"name":"Kishikawa Katsumi","kana":"キシカワカツミ","twitter":"k_katsumi","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/ec0ad365-c737-43bd-9fae-17ab62dac774.jpg"},"created":"2019-06-17T07:42:15+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T10:50:00+09:00","length_min":60},"feedback":{"open":false}},{"uuid":"9d47a951-88cb-4fe4-a2c5-c5f91034b5bb","title":"多言語対応と戦う 2019年版","abstract":"多言語対応はLocalizable.stringsやXcodeのツールをうまく使うだけでは終わりません。\r\n例えば、文字を装飾していたり、レイアウトやプレースホルダーの順番が変わるなどさまざまな課題があります。\r\n\r\nこのセッションでは実際に多言語対応するための運用フローやコーディングで気をつけるべきことを話します。\r\n\r\n◯ 多言語対応の基本技術(Localizable.strings)\r\n◯ 翻訳SaaSの導入\r\n◯ NSAttributedStringでの装飾\r\n◯ 画像に文字が入っている場合の対処法\r\n◯ 多言語対応のデバッグ","accepted":true,"speaker":{"name":"matsuokah","kana":"マツオカ","twitter":"matsuokah_","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/a4265750-e81a-4833-a12c-0aa12de6373a.jpg"},"created":"2019-06-17T09:40:51+09:00","timetable":{"track":"Track B","starts_at":"2019-09-07T14:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"16f99545-3024-451f-bb0f-db2829fb26b0","title":"SOLID原則を生活に適用する","abstract":"SOLID原則は、オブジェクト指向プログラミングにおける基本的な5つの原則です。\r\n\r\nS - 単一責任の原則 (Single Responsibility Principle)\r\nO - 開放\/閉鎖原則 (Open\/Closed Principle)\r\nL - リスコフの置換原則 (Liskov Substitution Principle)\r\nI - インタフェース分離の原則 (Interface Segregation Principle)\r\nD - 依存関係逆転の原則 (Dependency Inversion Principle)\r\n\r\nコーディングにおいて、言語化できない不吉なにおい（Code Smell）を感じたときには、これらの原則に照らし合わせることで設計の間違いを言語化し、修正の手がかりを掴むことができます。\r\n\r\nSOLID原則はもちろん、ソフトウェア設計のための原則です。\r\nしかしオブジェクト指向は「複雑な問題領域を分割統治する」コンセプトであり一般性を見いだせます。原則が転用できるのは、コードの中のみではないはず。\r\nこのLTでは、コーディングにまつわらない日常生活のものごとをいくつか例に挙げ、SOLID原則の視点で解釈してみます。\r\nドキュメンテーションから部屋掃除に至るまで、SOLID原則を適用すると、どのような「におい」をあぶり出し、改善することができるのでしょうか？\r\nそうやってSOLID原則に慣れ親しんでみれば、コーディングでのSOLID原則の熟達にも役立つことでしょう。\r\n\r\n30分枠でも同タイトルのプロポーザルを提出していますが、LT枠としては「こんなふうに共通の課題を見いだせる！」というアハ体験の楽しさを重視したいと思います。","accepted":true,"speaker":{"name":"takasek","kana":"タカセック","twitter":"takasek","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/7026ceb2-63e8-483f-bcb0-8434646a5bc4.jpg"},"created":"2019-06-17T09:51:44+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:35:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"a4e78fe8-6adb-4a92-a232-256ac0fa7976","title":"自作して理解するリアクティブプログラミングフレームワーク","abstract":"WWDC19で発表されたCombine.frameworkはリアクティブプログラミングという言葉では発表されなかったものの、複雑になりがちなイベント処理をデータの流れとして統一的に扱い、イベントへ反応する処理を組み合わせる宣言的なコーディングを実現します。\r\nこのことによりCombine.frameworkは最近のリアクティブプログラミングのパラダイムに沿ったフレームワークと言えるでしょう。これに備え、我々はリアクティブプログラミングのパラダイムを仕組みから理解する時がやってきたのです。\r\n\r\nこのトークでは、現状のリアクティブプログラミングフレームワークであり広く普及しているRxSwiftを構成するソースコードを解説し、それを参考にテストコードを交えながら最小限の「偽・リアクティブプログラミングフレームワーク」をトークの中で作成していきます。\r\n\r\nもちろん最小限の構成で理解を促進するものなので、非同期プログラミングのためのフレームワークとして本来は必須であるスレッドセーフ、メモリ管理、スケジューラの概念は捨てます。トキメかないので。\r\n\r\n\r\n説明のため必須なものまで捨てられた「偽・リアクティブプログラミングフレームワーク」によって、今まで雰囲気で知っていた次のルールが心で理解できるはずです。\r\n\r\n- Coldなストリームはなぜsubscribeされないと動作しないのか\r\n- SubjectがObservable\/Observerの性質を持つというのはどういう意味か\r\n- ColdをHotなストリームに変換する具体的な方法\r\n- Hotなストリームがsubscribeされても1回しかイベントを発生しないとはどういう原理か\r\n\r\n本セッションの進行とともに、皆さんには「理解したわー。リアクティブプログラミング完全に理解したわー」という感想を持っていただければ幸いです。","accepted":true,"speaker":{"name":"y.imajo","kana":"イマジョウヨシノリ","twitter":"yimajo","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/739bb25a-c20d-431f-a87c-f9d63bbdd05d.jpg"},"created":"2019-06-17T09:52:23+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T14:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"ab843c99-32e7-4dbe-ba3a-3edcbd635ffe","title":"CallKitを実装してはまったところをお話します","abstract":"EightでiOSアプリを開発しているアマゾネスです。\r\niOS10から公開されたCallKit。自分のアプリのDBを使用し、着信電話表示を実現するためのAPIです。\r\nEightは名刺情報の管理をするアプリということもあり、CallKitとの相性は抜群。\r\n実装しようという運びになったのですが、実装者はなぜEightに入ってして二ヶ月目の私。\r\n「データの扱いどうやればいいの泣」「設定画面のぐるぐるが消えないんだけど泣」「突然の機能停止泣」\r\n等、苦労したところをお話させていただこうと思います。","accepted":true,"speaker":{"name":"アマゾネスいけばた","kana":"アマゾネスイケバタ","twitter":"k191k","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/ee9b7860-6df2-4b04-9afb-300ed408eead.jpg"},"created":"2019-06-17T10:04:00+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T17:10:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"9c0a9bd4-eff2-414f-89d1-28416136dba5","title":"GitLabRunnerで始める自前CI環境","abstract":"みなさんCI環境はどうされていますか？\r\n\r\n最近ではBitriseを使う方が多くなってきていますね！\r\n\r\n弊社ではコード管理をGitLabで行なっているため、\r\nGitLabRunnerをiMacで動かしてCI環境を構築しています。\r\n\r\n・CIサービス使いたいけどお金かかるから...\r\n・弊社はGitLabじゃないけどBamboo使ってRunner回してる！\r\n\r\nなどといった方に参考となるお話をさせていただきたいです。\r\n\r\n・GitLabRunnerでどんな風にCIを回しているのか\r\n　・\bマージリクエストを出したらテストが回る\r\n　・ボタンポチで環境ごとにDeployGate配信\r\n　・Releaseタスクではappstoreconnectへのアップロードを自動化\r\n　など\r\n・どういう設定しているか、.gitlab-ci.ymlを一部公開\r\n・自前CIのつらみ","accepted":true,"speaker":{"name":"i.terasaka ","kana":"テラサカ","twitter":"ikichiemon","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/007904f1-08d4-421e-a3d2-209a18af37b0.jpg"},"created":"2019-06-17T10:48:37+09:00","timetable":{"track":"Track A","starts_at":"2019-09-06T17:10:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"024565ae-f840-4c26-a846-6daaf9c5ec24","title":"カスタムInstrumentsでアプリをピカピカに！","abstract":"Instrumentsといえば、「リーク検出などに便利なのは知っているけれど、とにかく重くてまともに動かない...」なんて印象を持たれている方もいるのではないでしょうか。実はXcodeの進化の陰で、Instrumentsも10から生まれ変わったようにパフォーマンスが向上し、できることが増えました。\r\n\r\n特にカスタムInstrumentsはとても強力です。\r\nアプリに機能を実装し、UIが良い感じに動いているのを確認し、リリースしてみたら...ログがうまく送れていなかったり、必要以上にAPIを叩いてしまっているのが発覚、なんて経験はありませんか？カスタムInstrumentsを作ってアプリ内のイベントを可視化すれば、こうした問題も一目瞭然です！\r\nまた、見たい処理だけにフォーカスすればパフォーマンスのネックも見つけやすく、高速化にも役立つでしょう。\r\n\r\n本トークではカスタムInstrumentsの作り方について詳しく解説します。\r\nちょっぴり癖はあるけれど、意外と簡単に作れますよ！あなたのアプリ専用のカスタムInstrumentsを作って、アプリをピカピカにしちゃいましょう！","accepted":true,"speaker":{"name":"行木 千春","kana":"ナメキ チハル","twitter":"Ridwy","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/452c773d-1a39-4ed7-b4cc-24ddc7fe439c.jpg"},"created":"2019-06-17T11:07:15+09:00","timetable":{"track":"Track D","starts_at":"2019-09-07T11:20:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"cde5fefc-f899-4dea-b356-bd556f625b83","title":"Advanced Segue （2019年のSegue事情）","abstract":"Segueでできること、できないこと、とにかくSegue（UIStoryboardSegue）について凝縮して紹介します。\r\n通常の使い方からUnwindSegueを使うメリット、Xcode 11から利用できるようになったIBSegueActionまで。\r\nSegueを愛して7年の私が、これまでSegueを避けてきた皆さんにもSegueの魅力を知っていただけるようなトークができればと考えています。","accepted":true,"speaker":{"name":"所友太","kana":"トコロユウタ","twitter":"tokorom","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/2d8721c3-4a04-40e3-ac84-ed0893d97f68.jpg"},"created":"2019-06-17T11:36:12+09:00","timetable":{"track":"Track B","starts_at":"2019-09-05T18:40:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"221dd883-bbfe-4534-8590-18025178a5c1","title":"先生のことをお母さんって呼んでも大丈夫。そうObjecive-Cならね","abstract":"日本ではほぼすべての人が義務教育期間を経て立派な大人になっていくと思います。そして、そんな意識が曖昧な期間の人々は大きな過ちを犯しがちです。そう。例えば「先生」に対して「お母さん」と呼んでしまう問題は鉄板の過ちと言えるでしょう。人間は過ちを犯すものです。脳内では「先生」と「お母さん」は区別はついているはずなのに呼び間違えてしまう事象が発生してしまいます。脳内に常にバグがあります。そんな我々が書くプログラムにおいてもそのようなバグが混在しないと言えるでしょうか？いいえ。発生しないなんて言い切れないです。特にSwiftのような実行前に厳格にチェックが入るシステムなら事故は減らすことができると思います。しかし、私達が普段扱っているのはSwiftで記述できますが、未だに@objcなどの存在がちらほら見えるUIKitやFoundationを支えているであろう Objective-C の存在を感じざるを得ません。Objective-Cでは非常に動的にメソッドを呼び出すことが可能です。これはつまり「先生」を「お母さん」と呼び間違える可能性が出てくるということです。Objective-Cの世界では「先生」に対して「お母さん」と呼び間違えたら自分が羞恥心でクラッシュします。\r\n\r\nこのトークではObjective-Cにおいて、「先生」を「お母さん」と呼び間違えてしまった場合の復帰策についてお話していきます。","accepted":true,"speaker":{"name":"bannzai","kana":"ばんざい","twitter":"_bannzai_","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/3b7851eb-166d-416c-9080-26391a48d465.jpg"},"created":"2019-06-17T11:44:16+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:20:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"54d74689-a15f-4807-89e4-08e5ceab0372","title":"5分でわかる！Xcode 11から使えるXCFrameworks","abstract":"WWDC 19で発表されたXcode 11の新機能の中でも喜ばしいものの1つは、XCFrameworksという、フレームワークの新しいバイナリ配布フォーマットです。これまでフレームワークの配布には\".framework\"という拡張子のフォーマット（バンドル）が使われていました。しかし\".framework\"のバイナリの配布では、1つのバンドルでシミューレーターとデバイス両方で使用できるようにするためのビルド手順の複雑さ、iOS用とmacOS用、tvOS用など対応プラットフォーム毎にバンドルを分離する必要（この場合は3つ）などの問題がありました。\r\n\r\nXcode 11から使える\".xcframework\"という新しいフォーマットは、まさにこれらの問題を解決しているのですが、どのように解決しているのか、またどうしてXcode 11のタイミングで導入されたのでしょうか？本LTではXCFrameworksの構造や作成方法、そしてこの形式が導入された理由（の推測）に迫っていきます。","accepted":true,"speaker":{"name":"Sho Ikeda（いけしょー）","kana":"イケショー","twitter":"ikesyo","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/b7b8c4f3-0727-4883-b0e0-bf056cb6d5f8.jpg"},"created":"2019-06-17T11:51:02+09:00","timetable":{"track":"Track B","starts_at":"2019-09-06T16:15:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"f7084cd9-d65f-41da-94e1-1eda2836e490","title":"スクリーン配信機能の実装が大変だったので知見をお伝えします","abstract":"iOSで画面を収録してライブ配信を行うにはReplayKit2を利用し、Upload Extension経由で画面を配信する必要があります。\r\nさて、そのUpload ExtensionをXcodeで追加すると BroadcastSetupViewController というUIViewControllerが追加されます。\r\n\r\n「これ……なに……？」\r\n\r\nなんとか謎のViewControllerの正体を暴いた後、次の壁にぶつかりました。\r\nUpload Extensionの動作時にはiOS側の制限で約50MBのメモリ制限がかかっているため、\r\n気楽に処理を書くとすぐにメモリが枯渇してしまうのです。\r\n\r\n「気軽に処理書くとiOSに殺されるんだが……？」\r\n\r\nこのトークでは、将来スクリーン配信機能をつくる誰かが少しでも楽になることを主目的とし、\r\nスクリーン配信機能の作り方をまとめながら、ハマりどころやデバッグのコツをお話します。","accepted":true,"speaker":{"name":"FromAtom","kana":"フロムアトム","twitter":"FromAtom","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/90d30785-dcb9-417f-bfcb-54c039f32274.png"},"created":"2019-06-17T11:52:37+09:00","timetable":{"track":"Track A","starts_at":"2019-09-05T17:50:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"0e35f584-3f51-4bab-9f24-4fe8e584acab","title":"これデフォルトで作れないんだ！？を解消した話","abstract":"要求通りに従順に作るエンジニアとプロジェクトをしていると、\r\n「これってデフォルトの機能じゃないんだ..」「この動き作るのってそんなに辛いの..?」\r\nと後からデザイナーが知る、ということがたまにあるのではないかと思います。\r\nまた、UISearchBarを使えばいいところを細かい見た目の要求を守ろうとすることでUITextFieldを使ってみたり、\r\nUILabelじゃなくてあえてUIButtonで実装したりなども経験のあるエンジニアもいるのではないかと思います。\r\nこの辺りは認識の差をなくせば解決できる問題であり、\r\nデザイナーにある程度周知することで、裏で変に頑張るエンジニアを減らせるのではと考えています。\r\nこのトークでは、\r\n「（おそらく）あるあるな辛いデザイン要求」を順に見て考察しながら、技術面、コミュニケーション面含めどのように解決したのかについて話したいと思います。¥\r\nまた、それに伴って開発した、UIレシピブックアプリについても公開しようと思います","accepted":true,"speaker":{"name":"m-naruse","kana":"ナルセ"},"created":"2019-06-17T11:59:24+09:00","timetable":{"track":"Track A","starts_at":"2019-09-07T16:45:00+09:00","length_min":5},"feedback":{"open":false}},{"uuid":"aed43999-373f-40fc-9cf9-c15cc32bc670","title":"今こそwatchOS","abstract":"Apple Watchが登場し、WatchKitフレームワークが発表された当時は各社こぞって対応アプリ（実態はApp Extension）をリリースしたものでした。しかしApple Watchのデバイスとしての性能はとても貧弱でできることは非常に限られており、また開発環境は著しく不安定だったこともあり、watchOS 2の頃には開発者の間でのwatchOSアプリ開発ブームは去っていきました。\r\n\r\nしかしそれから数年経ち、Apple Watchの性能は大きく向上し、watchOS 6ではついにIndependent Appも作れるようになりました。多くの機能（フレームワーク）がApple Watch側で動作することになり、「こんなアプリがウォッチ上で動いたらいいな」というアイデアの実現可能性は昔とは比べるべくもないほどに上がっています。\r\n\r\n本トークでは、Apple Watch \/ watchOSリリース当初はできなかったが今ではできるようになったことを中心に、「watchOSアプリ開発の今」についてお話しします。","accepted":true,"speaker":{"name":"堤 修一","kana":"ツツミ シュウイチ","twitter":"shu223","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/784bd4a1-8530-484e-a6f0-72e8ee9677f7.jpg"},"created":"2019-06-17T14:25:15+09:00","timetable":{"track":"Track D","starts_at":"2019-09-07T13:30:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"1c01507d-2dd5-48d8-bcd0-9898e09d3916","title":"GoogleSpeechToTextを活用して音声を動画にした話","abstract":"# 説明\r\nRadiotalkは、音声配信プラットフォームで、誰でもラジオのようにトークを配信することができます。\r\n最近、ワイヤレスイヤホンが普及などもあり、音声が注目されるようになってきました。\r\nしかし、音声は、以下のような再生までのハードルが高い課題がありました。\r\n・環境によっては今すぐ再生できない(音を出せる環境、ヘッドホンしているかなど)\r\n・再生するトークを選ぶ際に、タイトルや詳細、画像などでしか判断できない(トークのテンションや声などは判断できない)\r\n\r\nその課題を解決するために、音声の一部を書き起こして、テロップ動画でシェアできる機能を作成しました。\r\n音声から動画を作成するまでの話と作り方をお話したいと思います。\r\n\r\n## 発表内容\r\n・開発の流れ\r\n　・なぜ音声を動画にすることになったのか\r\n　・動画のテンプレートを作るまでの流れ\r\n　・実装の一連の流れ\r\n・音声トリミング方法\r\n・音声の解析方法\r\n　・GoogleSpeechToTextなぜ採用したか\r\n　・GoogleSpeechToTextの仕様\r\n　・GoogleSpeechToText精度\r\n・テロップ動画作成エディタのUI\/UX\r\n・静止画動画作成方法\r\n・音声と動画の合成方法","accepted":true,"speaker":{"name":"ようせい","kana":"ヨウセイ","twitter":"fairy_engineer","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/540adc60-5c49-4838-b9b9-91e7a2c28048.jpg"},"created":"2019-06-17T16:13:46+09:00","timetable":{"track":"Track A","starts_at":"2019-09-05T18:40:00+09:00","length_min":30},"feedback":{"open":false}},{"uuid":"7d86aeba-edcc-42f9-935f-2bfab70986bd","title":"企画","abstract":"TBD","accepted":true,"speaker":{"name":"長谷川智希","kana":"ハセガワトモキ","twitter":"tomzoh","avatar_url":"https:\/\/fortee.jp\/files\/iosdc-japan-2019\/speaker\/46975f57-8817-46dd-a21d-70835120e19d.jpg"},"created":"2019-08-01T17:46:57+09:00","timetable":{"track":"Track C","starts_at":"2019-09-07T13:30:00+09:00","length_min":120},"feedback":{"open":false}}]}